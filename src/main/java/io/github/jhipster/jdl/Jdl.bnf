// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
//  generate = [
//    exact-types = 'elements'
//  ]

  parserClass="io.github.jhipster.jdl.parser.JdlParser"
  parserUtilClass="io.github.jhipster.jdl.parser.JdlParserUtil"

  extends="io.github.jhipster.jdl.psi.impl.JdlPsiCompositeElementImpl"

  psiClassPrefix="Jdl"
  psiImplClassSuffix="Impl"
  psiPackage="io.github.jhipster.jdl.psi"
  psiImplPackage="io.github.jhipster.jdl.psi.impl"

  elementTypeHolderClass="io.github.jhipster.jdl.psi.JdlTypes"
  elementTypeClass="io.github.jhipster.jdl.psi.JdlElementType"
  tokenTypeClass="io.github.jhipster.jdl.psi.JdlTokenType"

  psiImplUtilClass="io.github.jhipster.jdl.psi.impl.JdlPsiImplUtil"
  parserUtilClass="io.github.jhipster.jdl.parser.JdlParserUtil"

//  mixin("string_literal_expression")="org.intellij.grammar.psi.impl.BnfStringImpl"
//  implements("value") = "io.github.jhipster.jdl.psi.JdlNamedElement"
//  extends("value") = "io.github.jhipster.jdl.psi.impl.JdlNamedElementImpl"

  tokens = [
    KW_APPLICATION = 'application'
    KW_ENUM = 'enum'
    KW_ENTITY = 'entity'

    V_REQUIRED = 'required'

    DIRECTIVE_SERVICE = 'service';
    DIRECTIVE_PAGINATE = 'paginate';
    DIRECTIVE_MICROSERVICE = 'microservice';

    SH_COMMENT = 'shell comment'
    SL_COMMENT = 'line comment'
    ML_COMMENT = 'block comment'

    BLANK = 'regexp:\s'

    NL = 'regexp:(\n)*'
    //NL = 'new line'
    //string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
    //id='regexp:\p{Alpha}\w*'
    //id="regexp:\w+"
    UP_ID="regexp:[A-Z]+[a-zA-Z0-9]*"
    LOW_ID="regexp:[a-z]+[a-zA-Z0-9]*"

    IDENTIFIER = 'regexp:[a-zA-Z][a-zA-Z0-9]*'

    T_RBRACE = '}'
    T_LPAREN = '('
    T_RPAREN = ')'
    T_LBRACK = '['
    T_RBRACK = ']'
    T_LBRACE = '{'

    LINEFEED = '\n'

    NUM_STRING = 'String'
    NUM_INT = 'Integer'
    NUM_LONG = 'Long'
    NUM_BIG_DECIMAL = 'BigDecimal'
    NUM_FLOAT = 'Float'
    NUM_DOUBLE = 'Double'
    NUM_ENUM = 'Enum'
    NUM_BOOELAN = 'Boolean'
    NUM_LOCAL_DATE = 'LocalDate'
    NUM_ZONED_DATE_TIME = 'ZonedDateTime'
    NUM_BLOB = 'Blob'
    NUM_ANY_BLOB = 'AnyBlob'
    NUM_IMAGE_BLOB = 'ImageBlob'
    NUM_TEXT_BLOB = 'TextBlob'

    T_WRONG = 'wrong token'
  ]
}

jdlFile ::= entry_item

entry_item ::= entry*

//entry ::= (application_type?)? entity_type (entity_type)* [enum_type (enum_type*)?] [directive_type? (directive_type*)?]
entry ::= application_type | entity_type | enum_type | directive_type {
  recoverWhile = entry_recover
}
private entry_recover ::= !('application' | 'entity' |  'enum')

application_type ::= COMMENT? application_type_definition

application_type_definition ::= mb_blanks 'application' mb_blanks brace_start application_type_body brace_end {
}

application_type_body ::= application_type_body_inner {
}

application_type_body_inner ::= ()

//
entity_type ::= COMMENT? entity_type_definition

//entity_type_definition ::= mb_blanks 'entity' mb_blanks entity_name mb_blanks entity_type_body
//entity_type_definition ::= mb_blanks 'entity' mb_blanks entity_name mb_blanks entity_type_body
entity_type_definition ::= mb_blanks 'entity' mb_blanks entity_name mb_blanks entity_type_body
//<<separated_item block_level_end statement block_level_start>>
//entity_name ::= UP_ID+ {
//  recoverWhile= entity_name_recover
//}

//entity_name ::= << nonStrictID >>

entity_name ::= << nonStrictID >> {mixin="io.github.jhipster.jdl.psi.impl.JdlNamedElementImpl" implements="io.github.jhipster.jdl.psi.JdlNamedElement"}

private entity_name_recover ::= !('{'|' ')

entity_type_body ::= '{' entity_type_body_inner '}' {
  pin = 1
}

entity_type_body_inner ::= field_member* {
  recoverWhile = simple_scope_recover
}

field_member ::= mb_nl COMMENT? mb_nl field_name mb_blanks field_type mb_blanks field_validation? {
  recoverWhile = brace_end
}

private field_name ::= LOW_ID+ {
  recoverWhile= field_name_recover
}

//field_name ::= << nonStrictID >> {mixin="io.github.jhipster.jdl.psi.impl.JdlNamedElementImpl" implements="io.github.jhipster.jdl.psi.JdlNamedElement"}

private field_name_recover ::= !(field_type)

private field_type ::= 'String' | 'Integer'
private field_validation ::= 'required'

//private entity_names ::= entity_name (',' entity_name)*

enum_type_body_inner ::= ()

//
enum_type ::= COMMENT? enum_type_definition

enum_type_definition ::= mb_blanks 'enum' mb_blanks brace_start enum_type_body brace_end {

}
enum_type_body ::= enum_type_body_inner {
}

//
directive_type ::= COMMENT? directive_type_definition

directive_type_definition ::= mb_blanks directive_name mb_blanks brace_start directive_type_body brace_end {

}
private directive_name ::= ('service' | 'paginate' | 'microservice')

directive_type_body ::= enum_type_body_inner {
}

private blank ::= BLANK { consumeTokenMethod = 'consumeTokenFast' }
private mb_blanks ::= blank?

private brace_end ::= <<eof>> | '}'
private brace_start ::= '{'

private simple_scope_recover ::= !'}'

// see nonStrictID
id ::= IDENTIFIER

private mb_nl ::= nl*
private nls ::= nl+
private nl ::= NL { consumeTokenMethod = 'consumeTokenFast' }

private separator ::= ',' | NL
private separators ::= separator+
private mb_separators ::= separator*

private external clear_error ::= clearError
private meta mb_nl_group ::= <<something>> | <<withProtectedLastVariantPos (nls <<something>>)>>

// fun item(end, element, start) = head(end, element, recovery(end, start)) | end
private meta separated_item ::= <<separated_item_head <<item_end>> <<element>> <<separated_recovery <<element_start>> <<item_end>>>>>> <<item_end>> { pin = 1 }
// fun head(end, element, recovery) = !end element { recoverWhile = recovery }
private meta separated_item_head ::= !<<item_end>> <<element>> { pin = 1 recoverWhile = '<<separated_recovery>>' }
// fun recovery(end, start) = !(end | start)
private meta separated_recovery ::= !(<<item_end>> | <<element_start>>)
// endregion

private external end_of_file ::= !<<eof>>
x
