/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.jhipster.jdl;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.github.jhipster.jdl.psi.JdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_JdlLexer.flex</tt>
 */
public class _JdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\5\1\22\0\1\30\7\0\1\34\1\35\6\0\12\3\7\0\1\53\1\45\1\56\1\46\1\50\1"+
    "\47\2\2\1\43\2\2\1\44\1\60\1\61\1\57\3\2\1\42\1\52\5\2\1\51\1\36\1\41\1\37"+
    "\3\0\1\5\1\31\1\11\1\23\1\15\1\4\1\26\1\27\1\10\1\4\1\32\1\7\1\17\1\14\1\13"+
    "\1\6\1\22\1\21\1\24\1\12\1\16\1\25\1\55\1\54\1\20\1\4\1\40\1\0\1\33\7\0\1"+
    "\1\32\0\1\1\337\0\1\1\177\0\13\1\35\0\2\1\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\11\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\2\12\4\1\5\1\4\11\5"+
    "\1\14\15\4\1\5\1\4\12\5\16\4\1\5\1\4"+
    "\4\5\1\15\5\5\4\4\1\16\1\17\4\4\1\20"+
    "\3\4\1\5\1\4\2\5\1\0\6\5\7\4\1\21"+
    "\3\4\1\5\1\4\2\5\1\0\1\22\3\5\2\0"+
    "\1\23\5\4\1\24\3\4\1\0\1\4\2\5\1\0"+
    "\2\5\1\25\2\0\1\26\3\4\1\27\2\4\1\30"+
    "\1\0\1\31\1\5\1\32\1\0\1\5\1\33\2\0"+
    "\4\4\1\34\1\0\1\5\1\0\1\5\2\0\1\35"+
    "\1\36\2\4\1\0\1\5\1\0\1\5\2\0\1\37"+
    "\1\4\1\0\1\40\1\0\1\5\2\0\1\4\1\41"+
    "\1\42\1\43\2\0\1\4\1\44\1\45\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352"+
    "\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2"+
    "\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672"+
    "\0\u06a4\0\62\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\310"+
    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\226\0\226\0\u1162\0\u1194\0\u11c6\0\u11f8\0\226"+
    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
    "\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u1612\0\226\0\u1644\0\u1676"+
    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\310\0\u17d4"+
    "\0\u1806\0\u1838\0\u186a\0\u189c\0\226\0\u18ce\0\u1900\0\u1932"+
    "\0\u1964\0\u1996\0\226\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\310\0\u1bbc\0\u1bee"+
    "\0\226\0\u1c20\0\u1c52\0\u1c84\0\226\0\u1cb6\0\u1ce8\0\226"+
    "\0\u1d1a\0\226\0\u1d4c\0\310\0\u1d7e\0\u1db0\0\310\0\u1de2"+
    "\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\226\0\u1f0e\0\u1f40"+
    "\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\226\0\226\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\226\0\u21ca"+
    "\0\u21fc\0\310\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\62"+
    "\0\62\0\310\0\u2328\0\u235a\0\u238c\0\62\0\62\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\5\5\1\11\1\5\1\12\1\5\1\13\2\5\1\14"+
    "\3\5\1\3\1\15\1\5\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\5\1\37\1\40"+
    "\3\4\63\0\1\3\26\0\1\3\33\0\26\4\1\0"+
    "\2\4\7\0\20\4\2\0\26\5\1\0\2\5\7\0"+
    "\20\5\2\0\4\5\1\41\21\5\1\0\2\5\7\0"+
    "\20\5\2\0\3\5\1\42\22\5\1\0\2\5\7\0"+
    "\20\5\2\0\6\5\1\43\17\5\1\0\2\5\7\0"+
    "\20\5\2\0\12\5\1\44\13\5\1\0\2\5\7\0"+
    "\20\5\2\0\6\5\1\45\17\5\1\0\2\5\7\0"+
    "\20\5\2\0\13\5\1\46\12\5\1\0\2\5\7\0"+
    "\20\5\2\0\13\5\1\47\11\5\1\50\1\0\2\5"+
    "\7\0\20\5\2\0\5\5\1\51\20\5\1\0\2\5"+
    "\7\0\20\5\14\0\1\52\47\0\10\4\1\53\15\4"+
    "\1\0\2\4\7\0\20\4\2\0\12\4\1\54\2\4"+
    "\1\55\10\4\1\0\2\4\7\0\20\4\2\0\11\4"+
    "\1\56\14\4\1\0\2\4\7\0\20\4\2\0\5\4"+
    "\1\57\1\60\2\4\1\61\14\4\1\0\2\4\7\0"+
    "\20\4\2\0\11\4\1\62\14\4\1\0\2\4\7\0"+
    "\20\4\2\0\5\4\1\63\20\4\1\0\2\4\7\0"+
    "\20\4\2\0\12\4\1\64\13\4\1\0\2\4\7\0"+
    "\20\4\2\0\11\4\1\65\14\4\1\0\2\4\7\0"+
    "\20\4\2\0\13\4\1\66\12\4\1\0\2\4\7\0"+
    "\20\4\2\0\12\4\1\67\13\4\1\0\2\4\7\0"+
    "\20\4\2\0\17\5\1\70\6\5\1\0\2\5\7\0"+
    "\20\5\2\0\26\4\1\0\2\4\7\0\15\4\1\71"+
    "\2\4\2\0\4\5\1\72\21\5\1\0\2\5\7\0"+
    "\20\5\2\0\24\5\1\73\1\5\1\0\2\5\7\0"+
    "\20\5\2\0\12\5\1\74\13\5\1\0\2\5\7\0"+
    "\20\5\2\0\10\5\1\75\3\5\1\76\11\5\1\0"+
    "\2\5\7\0\20\5\2\0\7\5\1\77\16\5\1\0"+
    "\2\5\7\0\20\5\2\0\20\5\1\100\5\5\1\0"+
    "\2\5\7\0\20\5\2\0\17\5\1\101\6\5\1\0"+
    "\2\5\7\0\20\5\2\0\13\5\1\102\12\5\1\0"+
    "\2\5\7\0\20\5\2\0\11\5\1\103\14\5\1\0"+
    "\2\5\7\0\20\5\2\0\17\4\1\104\6\4\1\0"+
    "\2\4\7\0\20\4\2\0\10\4\1\105\15\4\1\0"+
    "\2\4\7\0\20\4\2\0\3\4\1\106\22\4\1\0"+
    "\2\4\7\0\20\4\2\0\7\4\1\107\2\4\1\110"+
    "\13\4\1\0\2\4\7\0\20\4\2\0\11\4\1\111"+
    "\14\4\1\0\2\4\7\0\20\4\2\0\24\4\1\112"+
    "\1\4\1\0\2\4\7\0\20\4\2\0\11\4\1\113"+
    "\14\4\1\0\2\4\7\0\20\4\2\0\14\4\1\114"+
    "\11\4\1\0\2\4\7\0\20\4\2\0\11\4\1\115"+
    "\14\4\1\0\2\4\7\0\20\4\2\0\14\4\1\116"+
    "\11\4\1\0\2\4\7\0\20\4\2\0\12\4\1\117"+
    "\13\4\1\0\2\4\7\0\20\4\2\0\26\4\1\0"+
    "\2\4\7\0\12\4\1\120\5\4\2\0\16\4\1\121"+
    "\7\4\1\0\2\4\7\0\20\4\2\0\11\5\1\122"+
    "\14\5\1\0\2\5\7\0\20\5\2\0\26\4\1\0"+
    "\2\4\7\0\16\4\1\123\1\4\2\0\5\5\1\124"+
    "\20\5\1\0\2\5\7\0\20\5\2\0\6\5\1\125"+
    "\17\5\1\0\2\5\7\0\20\5\2\0\13\5\1\126"+
    "\12\5\1\0\2\5\7\0\20\5\2\0\6\5\1\127"+
    "\17\5\1\0\2\5\7\0\20\5\2\0\15\5\1\130"+
    "\10\5\1\0\2\5\7\0\20\5\2\0\17\5\1\131"+
    "\6\5\1\0\2\5\7\0\20\5\2\0\14\5\1\132"+
    "\11\5\1\0\2\5\7\0\20\5\2\0\23\5\1\133"+
    "\2\5\1\0\2\5\7\0\20\5\2\0\5\5\1\134"+
    "\20\5\1\0\2\5\7\0\20\5\2\0\7\5\1\135"+
    "\16\5\1\0\2\5\7\0\20\5\2\0\6\4\1\136"+
    "\17\4\1\0\2\4\7\0\20\4\2\0\13\4\1\137"+
    "\12\4\1\0\2\4\7\0\20\4\2\0\24\4\1\140"+
    "\1\4\1\0\2\4\7\0\20\4\2\0\3\4\1\141"+
    "\22\4\1\0\2\4\7\0\20\4\2\0\24\4\1\142"+
    "\1\4\1\0\2\4\7\0\20\4\2\0\26\4\1\0"+
    "\1\143\1\4\7\0\20\4\2\0\26\4\1\0\2\4"+
    "\7\0\4\4\1\144\13\4\2\0\5\4\1\145\20\4"+
    "\1\0\2\4\7\0\20\4\2\0\26\4\1\0\1\146"+
    "\1\4\7\0\20\4\2\0\3\4\1\147\22\4\1\0"+
    "\2\4\7\0\20\4\2\0\15\4\1\150\10\4\1\0"+
    "\2\4\7\0\20\4\2\0\13\4\1\151\12\4\1\0"+
    "\2\4\7\0\20\4\2\0\10\4\1\152\15\4\1\0"+
    "\2\4\7\0\20\4\2\0\26\4\1\0\2\4\7\0"+
    "\3\4\1\153\14\4\2\0\12\5\1\154\13\5\1\0"+
    "\2\5\7\0\20\5\2\0\26\4\1\0\2\4\7\0"+
    "\16\4\1\155\1\4\2\0\6\5\1\156\17\5\1\0"+
    "\2\5\7\0\20\5\2\0\12\5\1\157\13\5\1\0"+
    "\2\5\7\0\20\5\2\0\26\5\1\160\2\5\7\0"+
    "\20\5\2\0\10\5\1\161\15\5\1\0\2\5\7\0"+
    "\20\5\2\0\11\5\1\162\14\5\1\0\2\5\7\0"+
    "\20\5\2\0\6\5\1\163\17\5\1\0\2\5\7\0"+
    "\20\5\2\0\6\5\1\164\17\5\1\0\2\5\7\0"+
    "\20\5\2\0\5\5\1\165\20\5\1\0\2\5\7\0"+
    "\20\5\2\0\26\5\1\0\1\5\1\166\7\0\20\5"+
    "\2\0\12\4\1\167\13\4\1\0\2\4\7\0\20\4"+
    "\2\0\24\4\1\170\1\4\1\0\2\4\7\0\20\4"+
    "\2\0\13\4\1\171\12\4\1\0\2\4\7\0\20\4"+
    "\2\0\5\4\1\172\20\4\1\0\2\4\7\0\20\4"+
    "\2\0\13\4\1\173\12\4\1\0\2\4\7\0\20\4"+
    "\2\0\13\4\1\174\12\4\1\0\2\4\7\0\20\4"+
    "\2\0\5\4\1\175\20\4\1\0\2\4\7\0\20\4"+
    "\2\0\10\4\1\176\15\4\1\0\2\4\7\0\20\4"+
    "\2\0\21\4\1\177\4\4\1\0\2\4\7\0\20\4"+
    "\2\0\26\4\1\0\2\4\7\0\3\4\1\200\14\4"+
    "\2\0\5\4\1\201\20\4\1\0\2\4\7\0\20\4"+
    "\2\0\24\5\1\202\1\5\1\0\2\5\7\0\20\5"+
    "\2\0\26\4\1\0\2\4\7\0\6\4\1\203\11\4"+
    "\2\0\7\5\1\204\16\5\1\0\2\5\7\0\20\5"+
    "\2\0\3\5\1\205\22\5\1\0\2\5\7\0\20\5"+
    "\11\0\1\206\52\0\16\5\1\207\7\5\1\0\2\5"+
    "\7\0\20\5\2\0\22\5\1\210\3\5\1\0\2\5"+
    "\7\0\20\5\2\0\17\5\1\211\6\5\1\0\2\5"+
    "\7\0\20\5\2\0\7\5\1\212\16\5\1\0\2\5"+
    "\7\0\20\5\2\0\26\5\1\213\2\5\7\0\20\5"+
    "\2\0\26\5\1\214\2\5\7\0\20\5\2\0\24\4"+
    "\1\215\1\4\1\0\2\4\7\0\20\4\2\0\13\4"+
    "\1\216\12\4\1\0\2\4\7\0\20\4\2\0\26\4"+
    "\1\0\2\4\7\0\3\4\1\217\14\4\2\0\26\4"+
    "\1\0\2\4\7\0\4\4\1\220\13\4\2\0\7\4"+
    "\1\221\16\4\1\0\2\4\7\0\20\4\2\0\3\4"+
    "\1\222\22\4\1\0\2\4\7\0\20\4\2\0\13\4"+
    "\1\223\12\4\1\0\2\4\7\0\20\4\2\0\26\4"+
    "\1\0\2\4\7\0\4\4\1\224\13\4\2\0\5\4"+
    "\1\225\20\4\1\0\2\4\7\0\20\4\2\0\11\4"+
    "\1\226\14\4\1\0\2\4\7\0\20\4\2\0\26\5"+
    "\1\227\2\5\7\0\20\5\2\0\26\4\1\0\2\4"+
    "\7\0\17\4\1\230\2\0\3\5\1\231\22\5\1\0"+
    "\2\5\7\0\20\5\2\0\10\5\1\232\15\5\1\0"+
    "\2\5\7\0\20\5\13\0\1\233\50\0\13\5\1\234"+
    "\12\5\1\0\2\5\7\0\20\5\2\0\13\5\1\235"+
    "\12\5\1\0\2\5\7\0\20\5\2\0\13\5\1\236"+
    "\12\5\1\0\2\5\7\0\20\5\11\0\1\237\61\0"+
    "\1\240\52\0\17\4\1\241\6\4\1\0\2\4\7\0"+
    "\20\4\2\0\5\4\1\242\20\4\1\0\2\4\7\0"+
    "\20\4\2\0\3\4\1\243\22\4\1\0\2\4\7\0"+
    "\20\4\2\0\6\4\1\244\17\4\1\0\2\4\7\0"+
    "\20\4\2\0\12\4\1\245\13\4\1\0\2\4\7\0"+
    "\20\4\2\0\3\4\1\246\22\4\1\0\2\4\7\0"+
    "\20\4\2\0\11\4\1\247\14\4\1\0\2\4\7\0"+
    "\20\4\2\0\26\4\1\0\1\250\1\4\7\0\20\4"+
    "\12\0\1\251\51\0\26\4\1\0\2\4\7\0\10\4"+
    "\1\252\7\4\2\0\10\5\1\253\15\5\1\0\2\5"+
    "\7\0\20\5\2\0\13\5\1\254\12\5\1\0\2\5"+
    "\7\0\20\5\17\0\1\255\44\0\17\5\1\256\6\5"+
    "\1\0\2\5\7\0\20\5\2\0\21\5\1\257\4\5"+
    "\1\0\2\5\7\0\20\5\13\0\1\260\61\0\1\261"+
    "\50\0\11\4\1\262\14\4\1\0\2\4\7\0\20\4"+
    "\2\0\10\4\1\263\15\4\1\0\2\4\7\0\20\4"+
    "\2\0\15\4\1\264\10\4\1\0\2\4\7\0\20\4"+
    "\2\0\10\4\1\265\15\4\1\0\2\4\7\0\20\4"+
    "\2\0\26\4\1\0\1\266\1\4\7\0\20\4\13\0"+
    "\1\267\50\0\6\5\1\270\17\5\1\0\2\5\7\0"+
    "\20\5\17\0\1\271\44\0\23\5\1\272\2\5\1\0"+
    "\2\5\7\0\20\5\17\0\1\273\61\0\1\274\44\0"+
    "\26\4\1\0\1\275\1\4\7\0\20\4\2\0\13\4"+
    "\1\276\12\4\1\0\2\4\7\0\20\4\2\0\3\4"+
    "\1\277\22\4\1\0\2\4\7\0\20\4\2\0\13\4"+
    "\1\300\12\4\1\0\2\4\7\0\20\4\32\0\1\301"+
    "\31\0\11\5\1\302\14\5\1\0\2\5\7\0\20\5"+
    "\15\0\1\303\46\0\6\5\1\304\17\5\1\0\2\5"+
    "\7\0\20\5\17\0\1\305\61\0\1\306\44\0\5\4"+
    "\1\307\20\4\1\0\2\4\7\0\20\4\2\0\26\4"+
    "\1\0\2\4\7\0\10\4\1\310\7\4\15\0\1\311"+
    "\46\0\12\5\1\312\13\5\1\0\2\5\7\0\20\5"+
    "\14\0\1\313\47\0\7\5\1\314\16\5\1\0\2\5"+
    "\7\0\20\5\15\0\1\315\61\0\1\316\46\0\6\4"+
    "\1\317\17\4\1\0\2\4\7\0\20\4\14\0\1\320"+
    "\57\0\1\321\51\0\13\5\1\322\12\5\1\0\2\5"+
    "\7\0\20\5\14\0\1\323\61\0\1\324\47\0\15\4"+
    "\1\325\10\4\1\0\2\4\7\0\20\4\12\0\1\326"+
    "\61\0\1\327\51\0\13\4\1\330\12\4\1\0\2\4"+
    "\7\0\20\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\13\1\6\11\26\1\1\11\105\1\1\0"+
    "\25\1\1\0\4\1\2\0\12\1\1\0\3\1\1\0"+
    "\3\1\2\0\10\1\1\0\3\1\1\0\2\1\2\0"+
    "\5\1\1\0\1\1\1\0\1\1\2\0\4\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\1\1\1\0"+
    "\1\1\2\0\1\1\2\11\1\1\2\0\1\1\2\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _JdlLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return NL;
            } 
            // fall through
          case 39: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 40: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 41: break;
          case 4: 
            { return UP_ID;
            } 
            // fall through
          case 42: break;
          case 5: 
            { return LOW_ID;
            } 
            // fall through
          case 43: break;
          case 6: 
            { return T_RBRACE;
            } 
            // fall through
          case 44: break;
          case 7: 
            { return T_LPAREN;
            } 
            // fall through
          case 45: break;
          case 8: 
            { return T_RPAREN;
            } 
            // fall through
          case 46: break;
          case 9: 
            { return T_LBRACK;
            } 
            // fall through
          case 47: break;
          case 10: 
            { return T_RBRACK;
            } 
            // fall through
          case 48: break;
          case 11: 
            { return T_LBRACE;
            } 
            // fall through
          case 49: break;
          case 12: 
            { return LINEFEED;
            } 
            // fall through
          case 50: break;
          case 13: 
            { return KW_ENUM;
            } 
            // fall through
          case 51: break;
          case 14: 
            { return NUM_LONG;
            } 
            // fall through
          case 52: break;
          case 15: 
            { return NUM_BLOB;
            } 
            // fall through
          case 53: break;
          case 16: 
            { return NUM_ENUM;
            } 
            // fall through
          case 54: break;
          case 17: 
            { return NUM_FLOAT;
            } 
            // fall through
          case 55: break;
          case 18: 
            { return KW_ENTITY;
            } 
            // fall through
          case 56: break;
          case 19: 
            { return NUM_STRING;
            } 
            // fall through
          case 57: break;
          case 20: 
            { return NUM_DOUBLE;
            } 
            // fall through
          case 58: break;
          case 21: 
            { return DIRECTIVE_SERVICE;
            } 
            // fall through
          case 59: break;
          case 22: 
            { return NUM_INT;
            } 
            // fall through
          case 60: break;
          case 23: 
            { return NUM_BOOELAN;
            } 
            // fall through
          case 61: break;
          case 24: 
            { return NUM_ANY_BLOB;
            } 
            // fall through
          case 62: break;
          case 25: 
            { return COMMENT;
            } 
            // fall through
          case 63: break;
          case 26: 
            { return DIRECTIVE_PAGINATE;
            } 
            // fall through
          case 64: break;
          case 27: 
            { return V_REQUIRED;
            } 
            // fall through
          case 65: break;
          case 28: 
            { return NUM_TEXT_BLOB;
            } 
            // fall through
          case 66: break;
          case 29: 
            { return NUM_IMAGE_BLOB;
            } 
            // fall through
          case 67: break;
          case 30: 
            { return NUM_LOCAL_DATE;
            } 
            // fall through
          case 68: break;
          case 31: 
            { return NUM_BIG_DECIMAL;
            } 
            // fall through
          case 69: break;
          case 32: 
            { return KW_APPLICATION;
            } 
            // fall through
          case 70: break;
          case 33: 
            { return T_WRONG;
            } 
            // fall through
          case 71: break;
          case 34: 
            { return SL_COMMENT;
            } 
            // fall through
          case 72: break;
          case 35: 
            { return DIRECTIVE_MICROSERVICE;
            } 
            // fall through
          case 73: break;
          case 36: 
            { return SH_COMMENT;
            } 
            // fall through
          case 74: break;
          case 37: 
            { return ML_COMMENT;
            } 
            // fall through
          case 75: break;
          case 38: 
            { return NUM_ZONED_DATE_TIME;
            } 
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
