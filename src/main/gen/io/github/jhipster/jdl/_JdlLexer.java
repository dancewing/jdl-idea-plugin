/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package io.github.jhipster.jdl;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static io.github.jhipster.jdl.JdlTokenTypes.*;
import static io.github.jhipster.jdl.psi.JdlTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Jdl.flex</tt>
 */
public class _JdlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MULTI_LINE_COMMENT_STATE = 2;
  public static final int QUO_STRING = 4;
  public static final int THREE_QUO_STRING = 6;
  public static final int APOS_STRING = 8;
  public static final int THREE_APOS_STRING = 10;
  public static final int SHORT_TEMPLATE_ENTRY = 12;
  public static final int LONG_TEMPLATE_ENTRY = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\7\1\0\1\4\23\0\1\4\1\6\1\0\1\5\1\13\1\66\1\77\1\0\1\60\1\61\1"+
    "\11\1\15\1\72\1\63\1\70\1\10\12\1\1\73\1\62\1\74\1\64\1\67\1\71\1\100\1\54"+
    "\1\47\1\2\1\50\1\2\1\51\2\2\1\45\2\2\1\46\6\2\1\44\1\53\5\2\1\52\1\56\1\0"+
    "\1\57\1\76\1\2\1\0\1\21\1\32\1\27\1\3\1\14\1\36\1\37\1\34\1\26\1\2\1\33\1"+
    "\25\1\40\1\31\1\30\1\24\1\55\1\12\1\22\1\23\1\35\1\43\1\42\1\16\1\41\1\2\1"+
    "\17\1\75\1\20\1\65\201\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\2\1\10\1\11\1\12\32\2\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\3\36\1\37\2\40\1\4\1\2\1\41\1\42\1\43"+
    "\1\42\1\44\1\45\1\46\4\2\1\47\1\50\1\51"+
    "\17\2\1\52\1\53\1\54\5\2\1\55\1\56\33\2"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\40\1\2\1\101\1\102\15\2\1\103"+
    "\6\2\1\104\16\2\1\105\7\2\1\106\1\107\5\2"+
    "\1\110\16\2\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\40\2\2\1\101\1\120\1\0\5\2\1\121"+
    "\1\2\1\122\7\2\1\123\1\2\1\124\1\2\1\125"+
    "\1\2\1\126\1\2\1\127\1\2\1\130\3\2\1\131"+
    "\10\2\1\132\1\2\1\133\6\2\1\134\1\2\1\135"+
    "\4\2\1\136\1\137\7\2\1\140\1\141\12\2\1\142"+
    "\2\2\1\143\2\2\1\144\1\2\1\145\5\2\1\146"+
    "\1\147\1\150\5\2\1\151\1\152\1\2\1\153\1\154"+
    "\1\2\1\155\1\156\7\2\1\157\6\2\1\160\4\2"+
    "\1\161\1\2\1\162\1\163\3\2\1\164\1\165\4\2"+
    "\1\166\1\2\1\167\2\2\1\170\3\2\1\171\5\2"+
    "\1\172\4\2\1\173\1\174\2\2\1\175\4\2\1\176"+
    "\1\177\1\2\1\200\4\2\1\201\1\202\1\2\1\203"+
    "\3\2\1\204\2\2\1\205\1\206\1\207\1\210\1\2"+
    "\1\211\1\2\1\212\1\213\1\2\1\214\1\2\1\215"+
    "\5\2\1\216\1\217\2\2\1\220\1\2\1\221\1\222"+
    "\3\2\1\223\1\2\1\224\1\2\1\225\2\2\1\226"+
    "\1\2\1\227";

  private static int [] zzUnpackAction() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0186\0\u0186\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965"+
    "\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0186\0\u0186\0\u0186"+
    "\0\u0186\0\u0186\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0186\0\u0bef"+
    "\0\u0c30\0\u0186\0\u0186\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0186"+
    "\0\u0186\0\u0d75\0\u0db6\0\u0186\0\u0df7\0\u0e38\0\u0186\0\u0e79"+
    "\0\u01c7\0\u0eba\0\u0186\0\u0efb\0\u0f3c\0\u0186\0\u0186\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u0186\0\u0186\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u01c7\0\u01c7\0\u01c7"+
    "\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u01c7\0\u01c7\0\u15d6"+
    "\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de"+
    "\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee"+
    "\0\u1c2f\0\u1c70\0\u0186\0\u0186\0\u0186\0\u0186\0\u1cb1\0\u0186"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u0186\0\u1db5\0\u0186\0\u1df6\0\u0186"+
    "\0\u0186\0\u1e37\0\u0186\0\u0186\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u01c7\0\u22c9\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u240e\0\u01c7\0\u244f\0\u2490\0\u24d1"+
    "\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9"+
    "\0\u271a\0\u275b\0\u279c\0\u01c7\0\u27dd\0\u281e\0\u285f\0\u28a0"+
    "\0\u28e1\0\u2922\0\u2963\0\u01c7\0\u01c7\0\u29a4\0\u29e5\0\u2a26"+
    "\0\u2a67\0\u2aa8\0\u01c7\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed"+
    "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4\0\u2df5"+
    "\0\u2e36\0\u0186\0\u2e77\0\u0186\0\u0186\0\u0186\0\u0186\0\u0186"+
    "\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u0186\0\u1f3b\0\u2fbc\0\u2ffd"+
    "\0\u303e\0\u307f\0\u30c0\0\u01c7\0\u3101\0\u01c7\0\u3142\0\u3183"+
    "\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u01c7\0\u3309\0\u01c7"+
    "\0\u334a\0\u01c7\0\u338b\0\u01c7\0\u33cc\0\u01c7\0\u340d\0\u01c7"+
    "\0\u344e\0\u348f\0\u34d0\0\u01c7\0\u3511\0\u3552\0\u3593\0\u35d4"+
    "\0\u3615\0\u3656\0\u3697\0\u36d8\0\u01c7\0\u3719\0\u01c7\0\u375a"+
    "\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f\0\u01c7\0\u38e0\0\u01c7"+
    "\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u01c7\0\u01c7\0\u3a25\0\u3a66"+
    "\0\u3aa7\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u0186\0\u0df7\0\u3bec"+
    "\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u3db3\0\u3df4"+
    "\0\u3e35\0\u01c7\0\u3e76\0\u3eb7\0\u01c7\0\u3ef8\0\u3f39\0\u01c7"+
    "\0\u3f7a\0\u01c7\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u01c7"+
    "\0\u01c7\0\u4245\0\u4286\0\u01c7\0\u42c7\0\u01c7\0\u01c7\0\u4308"+
    "\0\u4349\0\u438a\0\u43cb\0\u440c\0\u444d\0\u448e\0\u01c7\0\u44cf"+
    "\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614\0\u01c7\0\u4655\0\u4696"+
    "\0\u46d7\0\u4718\0\u01c7\0\u4759\0\u01c7\0\u01c7\0\u479a\0\u47db"+
    "\0\u481c\0\u01c7\0\u01c7\0\u485d\0\u489e\0\u48df\0\u4920\0\u01c7"+
    "\0\u4961\0\u01c7\0\u49a2\0\u49e3\0\u01c7\0\u4a24\0\u4a65\0\u4aa6"+
    "\0\u01c7\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u01c7\0\u4c2c"+
    "\0\u4c6d\0\u4cae\0\u4cef\0\u01c7\0\u01c7\0\u4d30\0\u4d71\0\u01c7"+
    "\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u01c7\0\u01c7\0\u4eb6\0\u01c7"+
    "\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u01c7\0\u01c7\0\u4ffb\0\u01c7"+
    "\0\u503c\0\u507d\0\u50be\0\u01c7\0\u50ff\0\u5140\0\u01c7\0\u01c7"+
    "\0\u01c7\0\u01c7\0\u5181\0\u01c7\0\u51c2\0\u01c7\0\u01c7\0\u5203"+
    "\0\u01c7\0\u5244\0\u01c7\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389"+
    "\0\u01c7\0\u01c7\0\u53ca\0\u540b\0\u01c7\0\u544c\0\u01c7\0\u01c7"+
    "\0\u548d\0\u54ce\0\u550f\0\u01c7\0\u5550\0\u01c7\0\u5591\0\u01c7"+
    "\0\u55d2\0\u5613\0\u01c7\0\u5654\0\u01c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\12\1\15"+
    "\1\16\1\17\1\10\1\20\1\21\1\10\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\10\1\36\1\10\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\10\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\10\101\1\102\1\103\67\101\7\7\1\104\174\7\2\105"+
    "\6\7\1\105\1\7\1\105\1\7\1\105\2\7\2\105"+
    "\1\106\32\105\25\7\1\10\1\11\1\12\1\107\1\14"+
    "\1\12\1\15\1\16\1\17\1\10\1\20\1\21\1\10"+
    "\2\7\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\10\1\36\1\10\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\10\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\102\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\35\10\24\0\3\10\6\0\2\10\1\110\1\0\1\10"+
    "\2\0\7\10\1\111\25\10\27\0\1\12\2\0\1\12"+
    "\77\0\1\112\156\0\1\113\24\0\1\114\1\115\52\0"+
    "\1\116\100\0\1\117\15\0\3\10\6\0\2\10\1\120"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\121\2\0\4\10\1\122\3\10\1\123\24\10"+
    "\40\0\1\124\46\0\1\125\15\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\1\10\1\126\1\10\1\127\5\10"+
    "\1\130\7\10\1\131\13\10\24\0\3\10\6\0\2\10"+
    "\1\132\1\0\1\10\2\0\2\10\1\133\10\10\1\134"+
    "\1\135\3\10\1\136\1\137\13\10\24\0\3\10\6\0"+
    "\1\140\2\10\1\0\1\10\2\0\13\10\1\141\4\10"+
    "\1\142\14\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\1\143\34\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\1\144\4\10\1\145\27\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\10\1\146\6\10"+
    "\1\147\4\10\1\150\1\10\1\151\15\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\152\3\10\1\153"+
    "\2\10\1\154\25\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\3\10\1\155\4\10\1\156\4\10\1\157"+
    "\17\10\24\0\3\10\6\0\2\10\1\160\1\0\1\10"+
    "\2\0\1\161\13\10\1\162\20\10\24\0\3\10\6\0"+
    "\1\163\2\10\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\5\10\1\164\27\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\1\165"+
    "\4\10\1\166\1\10\1\167\25\10\24\0\3\10\6\0"+
    "\2\10\1\170\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\5\10\1\171\27\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\5\10"+
    "\1\172\27\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\5\10\1\173\5\10\1\174\21\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\175\6\10\1\176"+
    "\25\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\2\10\1\177\32\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\10\10\1\200\6\10\1\201\15\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\7\10\1\202"+
    "\25\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\4\10\1\203\1\204\1\10\1\205\25\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\7\10\1\206\25\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\4\10"+
    "\1\207\30\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\7\10\1\210\25\10\24\0\3\10\6\0\2\10"+
    "\1\211\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\10\10\1\212\24\10\106\0"+
    "\1\213\1\214\100\0\1\215\2\0\1\216\21\0\1\217"+
    "\154\0\1\220\104\0\1\221\100\0\1\222\1\223\73\0"+
    "\1\224\7\0\1\225\70\0\1\226\10\0\1\227\67\0"+
    "\1\230\100\0\1\231\12\0\1\232\12\0\1\233\77\0"+
    "\1\234\71\0\3\105\6\0\1\105\1\0\1\105\1\0"+
    "\1\105\2\0\35\105\24\0\3\105\6\0\1\105\1\0"+
    "\1\105\1\0\1\105\2\0\13\105\1\235\21\105\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\15\10\1\236"+
    "\17\10\23\0\7\112\1\0\100\112\1\0\1\237\70\112"+
    "\11\0\1\240\70\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\241\31\10\1\242\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\2\10\1\243\1\244\31\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\1\10"+
    "\1\245\33\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\246\11\10\1\247\20\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\10\1\250\16\10"+
    "\1\251\14\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\3\10\1\252\31\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\1\10\1\253\33\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\254\34\10\24\0"+
    "\3\10\6\0\1\255\2\10\1\0\1\10\2\0\2\10"+
    "\1\256\32\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\1\257\34\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\7\10\1\260\25\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\3\10\1\261\31\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\10\10\1\262"+
    "\24\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\5\10\1\263\27\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\14\10\1\264\3\10\1\265\14\10\24\0"+
    "\3\10\6\0\1\266\2\10\1\0\1\10\2\0\5\10"+
    "\1\267\27\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\3\10\1\270\31\10\24\0\3\10\6\0\1\271"+
    "\2\10\1\0\1\10\2\0\16\10\1\272\16\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\2\10\1\273"+
    "\32\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\11\10\1\274\23\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\3\10\1\275\31\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\1\10\1\276\1\277\32\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\1\300"+
    "\34\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\10\10\1\301\11\10\1\302\12\10\24\0\3\10\6\0"+
    "\2\10\1\303\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\21\10\1\304\13\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\2\10"+
    "\1\305\32\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\4\10\1\306\30\10\24\0\3\10\6\0\2\10"+
    "\1\307\1\0\1\10\2\0\35\10\24\0\2\10\1\310"+
    "\6\0\3\10\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\4\10\1\311\1\10"+
    "\1\312\26\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\10\10\1\313\24\10\24\0\3\10\6\0\1\314"+
    "\2\10\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\2\10\1\315\32\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\316\2\0\6\10\1\317"+
    "\26\10\24\0\3\10\6\0\2\10\1\320\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\321\32\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\5\10\1\322\27\10\24\0\3\10"+
    "\6\0\1\323\2\10\1\0\1\10\2\0\35\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\5\10\1\324"+
    "\27\10\24\0\3\10\6\0\1\325\2\10\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\326\32\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\1\327\34\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\6\10\1\330\1\10\1\331"+
    "\24\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\7\10\1\332\25\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\16\10\1\333\16\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\7\10\1\334\25\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\14\10\1\335"+
    "\20\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\7\10\1\336\25\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\10\10\1\337\24\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\340\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\20\10\1\341\14\10\107\0"+
    "\1\342\104\0\1\343\100\0\1\344\74\0\1\345\100\0"+
    "\1\346\100\0\1\347\100\0\1\350\15\0\3\105\6\0"+
    "\1\105\1\0\1\105\1\0\1\105\2\0\5\105\1\351"+
    "\27\105\24\0\3\10\6\0\2\10\1\352\1\0\1\10"+
    "\2\0\1\353\34\10\23\0\7\354\1\0\1\112\70\354"+
    "\10\0\1\355\1\356\70\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\13\10\1\357\1\360\20\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\14\10\1\361\20\10"+
    "\24\0\3\10\6\0\2\10\1\362\1\0\1\10\2\0"+
    "\35\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\7\10\1\363\25\10\24\0\3\10\6\0\2\10\1\364"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\5\10\1\365\27\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\17\10\1\366\15\10"+
    "\24\0\3\10\6\0\2\10\1\367\1\0\1\10\2\0"+
    "\35\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\10\10\1\370\24\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\4\10\1\371\30\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\2\10\1\372\32\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\5\10\1\373"+
    "\27\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\22\10\1\374\12\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\2\10\1\375\32\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\21\10\1\376\13\10\24\0"+
    "\3\10\6\0\2\10\1\377\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\6\10"+
    "\1\u0100\26\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\u0101\32\10\24\0\3\10\6\0\2\10"+
    "\1\u0102\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\7\10\1\u0103\25\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\1\10\1\u0104"+
    "\33\10\24\0\3\10\6\0\2\10\1\u0105\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\u0106\32\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\5\10\1\u0107\27\10\24\0\3\10"+
    "\6\0\2\10\1\u0108\1\0\1\10\2\0\35\10\24\0"+
    "\3\10\6\0\1\u0109\2\10\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\4\10"+
    "\1\u010a\2\10\1\u010b\25\10\24\0\3\10\6\0\2\10"+
    "\1\u010c\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\6\10\1\u010d\26\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\1\10\1\u010e"+
    "\33\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\1\10\1\u010f\1\u0110\12\10\1\u0111\17\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\u0112\34\10\24\0"+
    "\3\10\6\0\1\u0113\2\10\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\5\10"+
    "\1\u0114\27\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\4\10\1\u0115\30\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\1\u0116\34\10\24\0\3\10\6\0"+
    "\2\10\1\u0117\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\10\1\u0118\33\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\2\10"+
    "\1\u0119\32\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\1\u011a\34\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\5\10\1\u011b\27\10\24\0\3\10\6\0"+
    "\1\u011c\2\10\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\4\10\1\u011d\30\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\13\10"+
    "\1\u011e\21\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\4\10\1\u011f\30\10\24\0\2\10\1\u0120\6\0"+
    "\3\10\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\5\10\1\u0121\27\10\24\0"+
    "\3\10\6\0\2\10\1\u0122\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\16\10"+
    "\1\u0123\16\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\1\u0124\34\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\16\10\1\u0125\16\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\11\10\1\u0126\23\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\27\10\1\u0127"+
    "\5\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\4\10\1\u0128\30\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\11\10\1\u0129\23\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\1\u012a\34\10\24\0\3\10"+
    "\6\0\2\10\1\u012b\1\0\1\10\2\0\35\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\2\10\1\u012c"+
    "\32\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\26\10\1\u012d\6\10\114\0\1\u012e\10\0\3\105\6\0"+
    "\1\105\1\0\1\105\1\0\1\105\2\0\1\105\1\u012f"+
    "\33\105\24\0\3\10\6\0\1\u0130\2\10\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\14\10\1\u0131\20\10\23\0\7\354\1\0\71\354"+
    "\1\0\3\10\6\0\1\u0132\2\10\1\0\1\10\2\0"+
    "\35\10\24\0\3\10\6\0\1\u0133\2\10\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\5\10\1\u0134\27\10\24\0\3\10\6\0\1\u0135"+
    "\2\10\1\0\1\10\2\0\10\10\1\u0136\24\10\24\0"+
    "\3\10\6\0\1\u0137\2\10\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\2\10"+
    "\1\u0138\32\10\24\0\3\10\6\0\1\u0139\2\10\1\0"+
    "\1\10\2\0\35\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\6\10\1\u013a\26\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\5\10\1\u013b\27\10\24\0"+
    "\3\10\6\0\1\u013c\2\10\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\2\10"+
    "\1\u013d\32\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\5\10\1\u013e\27\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\5\10\1\u013f\27\10\24\0\3\10"+
    "\6\0\1\u0140\2\10\1\0\1\10\2\0\35\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\6\10\1\u0141"+
    "\26\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\21\10\1\u0142\13\10\24\0\2\10\1\u0143\6\0\3\10"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\10\10\1\u0144\24\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\u0145\34\10\24\0"+
    "\3\10\6\0\2\10\1\u0146\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\1\u0147\2\10\1\0\1\10\2\0"+
    "\35\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\13\10\1\u0148\21\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\1\10\1\u0149\33\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\2\10\1\u014a\32\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\5\10\1\u014b"+
    "\27\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\5\10\1\u014c\27\10\24\0\3\10\6\0\1\u014d\2\10"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\1\u014e\34\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\22\10\1\u014f\12\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\12\10\1\u0150"+
    "\22\10\24\0\3\10\6\0\2\10\1\u0151\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\7\10\1\u0152\25\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\4\10\1\u0153\30\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\10\10\1\u0154\24\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\7\10"+
    "\1\u0155\25\10\24\0\2\10\1\u0156\6\0\3\10\1\0"+
    "\1\10\2\0\35\10\24\0\3\10\6\0\2\10\1\u0157"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\10\10\1\u0158\24\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\16\10\1\u0159\16\10"+
    "\24\0\3\10\6\0\2\10\1\u015a\1\0\1\10\2\0"+
    "\35\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\4\10\1\u015b\30\10\24\0\3\10\6\0\2\10\1\u015c"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\2\10"+
    "\1\u015d\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\4\10\1\u015e\30\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\2\10\1\u015f"+
    "\32\10\24\0\2\10\1\u0160\6\0\3\10\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\26\10\1\u0161\6\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\4\10\1\u0162\30\10\24\0\3\10"+
    "\6\0\1\u0163\2\10\1\0\1\10\2\0\35\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\4\10\1\u0164"+
    "\30\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\7\10\1\u0165\25\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\10\10\1\u0166\24\10\24\0\3\10\6\0"+
    "\1\u0167\2\10\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\10\10\1\u0168\24\10"+
    "\24\0\2\10\1\u0169\6\0\3\10\1\0\1\10\2\0"+
    "\1\10\1\u016a\33\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\2\10\1\u016b\32\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\5\10\1\u016c\12\10\1\u016d"+
    "\14\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\2\10\1\u016e\32\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\6\10\1\u016f\26\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\1\u0170\34\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\6\10\1\u0171\26\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\6\10"+
    "\1\u0172\26\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\13\10\1\u0173\21\10\24\0\3\10\6\0\2\10"+
    "\1\u0174\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\1\u0175\34\10\24\0\3\10"+
    "\6\0\1\u0176\2\10\1\0\1\10\2\0\35\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\17\10\1\u0177"+
    "\15\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\2\10\1\u0178\32\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\10\10\1\u0179\24\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\16\10\1\u017a\16\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\5\10\1\u017b"+
    "\27\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\2\10\1\u017c\32\10\24\0\3\10\6\0\2\10\1\u017d"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\1\u017e"+
    "\2\10\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\4\10\1\u017f\30\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\1\10\1\u0180"+
    "\33\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\16\10\1\u0181\16\10\24\0\3\10\6\0\2\10\1\u0182"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\26\10\1\u0183\6\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\27\10\1\u0184\5\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\6\10"+
    "\1\u0185\26\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\1\u0186\34\10\24\0\3\10\6\0\2\10\1\u0187"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\27\10\1\u0188\5\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\4\10\1\u0189\30\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\7\10"+
    "\1\u018a\25\10\24\0\3\10\6\0\2\10\1\u018b\1\0"+
    "\1\10\2\0\35\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\2\10\1\u018c\32\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\21\10\1\u018d\13\10\24\0"+
    "\3\10\6\0\2\10\1\u018e\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\1\u018f"+
    "\34\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\1\10\1\u0190\33\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\5\10\1\u0191\27\10\24\0\3\10\6\0"+
    "\2\10\1\u0192\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\u0193\34\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\6\10\1\u0194"+
    "\26\10\24\0\3\10\6\0\2\10\1\u0195\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\15\10\1\u0196\17\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\2\10\1\u0197\32\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\20\10\1\u0198\14\10"+
    "\24\0\3\10\6\0\2\10\1\u0199\1\0\1\10\2\0"+
    "\35\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\14\10\1\u019a\20\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\1\u019b\34\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\7\10\1\u019c\25\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\20\10\1\u019d\14\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\20\10"+
    "\1\u019e\14\10\24\0\3\10\6\0\2\10\1\u019f\1\0"+
    "\1\10\2\0\35\10\24\0\3\10\6\0\1\u01a0\2\10"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\4\10\1\u01a1\30\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\u01a2\34\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\5\10\1\u01a3"+
    "\27\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\10\10\1\u01a4\24\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\1\u01a5\34\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\7\10\1\u01a6\25\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\11\10\1\u01a7\23\10"+
    "\24\0\2\10\1\u01a8\6\0\3\10\1\0\1\10\2\0"+
    "\35\10\24\0\2\10\1\u01a9\6\0\3\10\1\0\1\10"+
    "\2\0\35\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\4\10\1\u01aa\30\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\7\10\1\u01ab\25\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\1\10\1\u01ac\33\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\2\10"+
    "\1\u01ad\32\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\u01ae\32\10\24\0\3\10\6\0\2\10"+
    "\1\u01af\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\10\10\1\u01b0\24\10\24\0"+
    "\3\10\6\0\2\10\1\u01b1\1\0\1\10\2\0\35\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\10\10"+
    "\1\u01b2\24\10\24\0\3\10\6\0\1\u01b3\2\10\1\0"+
    "\1\10\2\0\35\10\24\0\3\10\6\0\1\u01b4\2\10"+
    "\1\0\1\10\2\0\35\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\7\10\1\u01b5\25\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\2\10\1\u01b6\32\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\17\10"+
    "\1\u01b7\15\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\u01b8\32\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\11\10\1\u01b9\23\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\10\10\1\u01ba\24\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\5\10"+
    "\1\u01bb\27\10\24\0\3\10\6\0\3\10\1\0\1\10"+
    "\2\0\2\10\1\u01bc\32\10\24\0\3\10\6\0\3\10"+
    "\1\0\1\10\2\0\2\10\1\u01bd\32\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\22\10\1\u01be\12\10"+
    "\24\0\3\10\6\0\3\10\1\0\1\10\2\0\11\10"+
    "\1\u01bf\23\10\24\0\3\10\6\0\2\10\1\u01c0\1\0"+
    "\1\10\2\0\35\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\1\u01c1\34\10\24\0\3\10\6\0\2\10"+
    "\1\u01c2\1\0\1\10\2\0\35\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\7\10\1\u01c3\25\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\1\10\1\u01c4"+
    "\33\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\5\10\1\u01c5\27\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\4\10\1\u01c6\30\10\24\0\3\10\6\0"+
    "\3\10\1\0\1\10\2\0\32\10\1\u01c7\2\10\24\0"+
    "\3\10\6\0\3\10\1\0\1\10\2\0\10\10\1\u01c8"+
    "\24\10\24\0\3\10\6\0\3\10\1\0\1\10\2\0"+
    "\6\10\1\u01c9\26\10\24\0\3\10\6\0\3\10\1\0"+
    "\1\10\2\0\5\10\1\u01ca\27\10\24\0\3\10\6\0"+
    "\2\10\1\u01cb\1\0\1\10\2\0\35\10\24\0\3\10"+
    "\6\0\3\10\1\0\1\10\2\0\17\10\1\u01cc\15\10"+
    "\24\0\3\10\6\0\2\10\1\u01cd\1\0\1\10\2\0"+
    "\35\10\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22165];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\12\1\2\11\32\1\5\11\4\1\1\11"+
    "\2\1\2\11\4\1\2\11\2\1\1\11\2\1\1\11"+
    "\3\1\1\11\2\1\2\11\4\1\2\11\65\1\4\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\1\2\11\105\1\1\11\1\1\5\11\4\1\1\11"+
    "\1\0\77\1\1\11\237\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[461];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final class State {
    final int lBraceCount;
    final int state;

    private State(int state, int lBraceCount) {
      this.state = state;
      this.lBraceCount = lBraceCount;
    }

    @Override
    public String toString() {
      return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
    }
  }

  protected final Stack<State> myStateStack = new Stack<>();
  protected int myLeftBraceCount;

  private void pushState(int state) {
    myStateStack.push(new State(yystate(), myLeftBraceCount));
    myLeftBraceCount = 0;
    yybegin(state);
  }

  private void popState() {
    State state = myStateStack.pop();
    myLeftBraceCount = state.lBraceCount;
    yybegin(state.state);
  }

  public _JdlLexer() {
    this(null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _JdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
      myLeftBraceCount = 0;
  myStateStack.clear();

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 152: break;
          case 2: 
            { return IDENTIFIER;
            } 
            // fall through
          case 153: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 154: break;
          case 4: 
            { return HASH;
            } 
            // fall through
          case 155: break;
          case 5: 
            { return NOT;
            } 
            // fall through
          case 156: break;
          case 6: 
            { return DIV;
            } 
            // fall through
          case 157: break;
          case 7: 
            { return MUL;
            } 
            // fall through
          case 158: break;
          case 8: 
            { return PLUS;
            } 
            // fall through
          case 159: break;
          case 9: 
            { return LBRACE;
            } 
            // fall through
          case 160: break;
          case 10: 
            { return RBRACE;
            } 
            // fall through
          case 161: break;
          case 11: 
            { return LBRACKET;
            } 
            // fall through
          case 162: break;
          case 12: 
            { return RBRACKET;
            } 
            // fall through
          case 163: break;
          case 13: 
            { return LPAREN;
            } 
            // fall through
          case 164: break;
          case 14: 
            { return RPAREN;
            } 
            // fall through
          case 165: break;
          case 15: 
            { return SEMICOLON;
            } 
            // fall through
          case 166: break;
          case 16: 
            { return MINUS;
            } 
            // fall through
          case 167: break;
          case 17: 
            { return EQ;
            } 
            // fall through
          case 168: break;
          case 18: 
            { return BIN_NOT;
            } 
            // fall through
          case 169: break;
          case 19: 
            { return REM;
            } 
            // fall through
          case 170: break;
          case 20: 
            { return GT;
            } 
            // fall through
          case 171: break;
          case 21: 
            { return DOT;
            } 
            // fall through
          case 172: break;
          case 22: 
            { return QUEST;
            } 
            // fall through
          case 173: break;
          case 23: 
            { return COMMA;
            } 
            // fall through
          case 174: break;
          case 24: 
            { return COLON;
            } 
            // fall through
          case 175: break;
          case 25: 
            { return LT;
            } 
            // fall through
          case 176: break;
          case 26: 
            { return OR;
            } 
            // fall through
          case 177: break;
          case 27: 
            { return XOR;
            } 
            // fall through
          case 178: break;
          case 28: 
            { return AND;
            } 
            // fall through
          case 179: break;
          case 29: 
            { return AT;
            } 
            // fall through
          case 180: break;
          case 30: 
            { return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 181: break;
          case 31: 
            { popState();                   return WHITE_SPACE;
            } 
            // fall through
          case 182: break;
          case 32: 
            { popState(); return IDENTIFIER;
            } 
            // fall through
          case 183: break;
          case 33: 
            { return DO;
            } 
            // fall through
          case 184: break;
          case 34: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 185: break;
          case 35: 
            { return NEQ;
            } 
            // fall through
          case 186: break;
          case 36: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_START;
            } 
            // fall through
          case 187: break;
          case 37: 
            { return DIV_EQ;
            } 
            // fall through
          case 188: break;
          case 38: 
            { return MUL_EQ;
            } 
            // fall through
          case 189: break;
          case 39: 
            { return PLUS_PLUS;
            } 
            // fall through
          case 190: break;
          case 40: 
            { return PLUS_EQ;
            } 
            // fall through
          case 191: break;
          case 41: 
            { return AS;
            } 
            // fall through
          case 192: break;
          case 42: 
            { return IS;
            } 
            // fall through
          case 193: break;
          case 43: 
            { return IN;
            } 
            // fall through
          case 194: break;
          case 44: 
            { return IF;
            } 
            // fall through
          case 195: break;
          case 45: 
            { return ON;
            } 
            // fall through
          case 196: break;
          case 46: 
            { return OF;
            } 
            // fall through
          case 197: break;
          case 47: 
            { return MINUS_MINUS;
            } 
            // fall through
          case 198: break;
          case 48: 
            { return MINUS_EQ;
            } 
            // fall through
          case 199: break;
          case 49: 
            { return EQ_EQ;
            } 
            // fall through
          case 200: break;
          case 50: 
            { return EXPRESSION_BODY_DEF;
            } 
            // fall through
          case 201: break;
          case 51: 
            { return INT_DIV;
            } 
            // fall through
          case 202: break;
          case 52: 
            { return REM_EQ;
            } 
            // fall through
          case 203: break;
          case 53: 
            { return DOT_DOT;
            } 
            // fall through
          case 204: break;
          case 54: 
            { return QUEST_DOT;
            } 
            // fall through
          case 205: break;
          case 55: 
            { return QUEST_QUEST;
            } 
            // fall through
          case 206: break;
          case 56: 
            { return LT_EQ;
            } 
            // fall through
          case 207: break;
          case 57: 
            { return LT_LT;
            } 
            // fall through
          case 208: break;
          case 58: 
            { return OR_EQ;
            } 
            // fall through
          case 209: break;
          case 59: 
            { return OR_OR;
            } 
            // fall through
          case 210: break;
          case 60: 
            { return XOR_EQ;
            } 
            // fall through
          case 211: break;
          case 61: 
            { return AND_EQ;
            } 
            // fall through
          case 212: break;
          case 62: 
            { return AND_AND;
            } 
            // fall through
          case 213: break;
          case 63: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_COMMENT_BODY;
            } 
            // fall through
          case 214: break;
          case 64: 
            { popState();                          return yystate() == MULTI_LINE_COMMENT_STATE
                                                                                                               ? MULTI_LINE_COMMENT_BODY // inner comment closed
                                                                                                               : MULTI_LINE_COMMENT_END;
            } 
            // fall through
          case 215: break;
          case 65: 
            { return SINGLE_LINE_DOC_COMMENT;
            } 
            // fall through
          case 216: break;
          case 66: 
            { pushState(MULTI_LINE_COMMENT_STATE); return MULTI_LINE_DOC_COMMENT_START;
            } 
            // fall through
          case 217: break;
          case 67: 
            { return SET;
            } 
            // fall through
          case 218: break;
          case 68: 
            { return TRY;
            } 
            // fall through
          case 219: break;
          case 69: 
            { return NEW;
            } 
            // fall through
          case 220: break;
          case 70: 
            { return FOR;
            } 
            // fall through
          case 221: break;
          case 71: 
            { return GET;
            } 
            // fall through
          case 222: break;
          case 72: 
            { return VAR;
            } 
            // fall through
          case 223: break;
          case 73: 
            { return INT_DIV_EQ;
            } 
            // fall through
          case 224: break;
          case 74: 
            { return DOT_DOT_DOT;
            } 
            // fall through
          case 225: break;
          case 75: 
            { return QUEST_DOT_DOT;
            } 
            // fall through
          case 226: break;
          case 76: 
            { return QUEST_QUEST_EQ;
            } 
            // fall through
          case 227: break;
          case 77: 
            { return LT_LT_EQ;
            } 
            // fall through
          case 228: break;
          case 78: 
            { return OR_OR_EQ;
            } 
            // fall through
          case 229: break;
          case 79: 
            { return AND_AND_EQ;
            } 
            // fall through
          case 230: break;
          case 80: 
            { return MULTI_LINE_COMMENT;
            } 
            // fall through
          case 231: break;
          case 81: 
            { return ELSE;
            } 
            // fall through
          case 232: break;
          case 82: 
            { return ENUM;
            } 
            // fall through
          case 233: break;
          case 83: 
            { return SHOW;
            } 
            // fall through
          case 234: break;
          case 84: 
            { return SYNC;
            } 
            // fall through
          case 235: break;
          case 85: 
            { return TRUE;
            } 
            // fall through
          case 236: break;
          case 86: 
            { return THIS;
            } 
            // fall through
          case 237: break;
          case 87: 
            { return PART;
            } 
            // fall through
          case 238: break;
          case 88: 
            { return LATE;
            } 
            // fall through
          case 239: break;
          case 89: 
            { return CASE;
            } 
            // fall through
          case 240: break;
          case 90: 
            { return NULL;
            } 
            // fall through
          case 241: break;
          case 91: 
            { return HIDE;
            } 
            // fall through
          case 242: break;
          case 92: 
            { return WITH;
            } 
            // fall through
          case 243: break;
          case 93: 
            { return VOID;
            } 
            // fall through
          case 244: break;
          case 94: 
            { return NUM_LONG;
            } 
            // fall through
          case 245: break;
          case 95: 
            { return NUM_BLOB;
            } 
            // fall through
          case 246: break;
          case 96: 
            { return DOT_DOT_DOT_QUEST;
            } 
            // fall through
          case 247: break;
          case 97: 
            { popState(); return THIS;
            } 
            // fall through
          case 248: break;
          case 98: 
            { return ASYNC;
            } 
            // fall through
          case 249: break;
          case 99: 
            { return AWAIT;
            } 
            // fall through
          case 250: break;
          case 100: 
            { return SUPER;
            } 
            // fall through
          case 251: break;
          case 101: 
            { return THROW;
            } 
            // fall through
          case 252: break;
          case 102: 
            { return CATCH;
            } 
            // fall through
          case 253: break;
          case 103: 
            { return CLASS;
            } 
            // fall through
          case 254: break;
          case 104: 
            { return CONST;
            } 
            // fall through
          case 255: break;
          case 105: 
            { return BREAK;
            } 
            // fall through
          case 256: break;
          case 106: 
            { return FALSE;
            } 
            // fall through
          case 257: break;
          case 107: 
            { return FINAL;
            } 
            // fall through
          case 258: break;
          case 108: 
            { return MIXIN;
            } 
            // fall through
          case 259: break;
          case 109: 
            { return YIELD;
            } 
            // fall through
          case 260: break;
          case 110: 
            { return WHILE;
            } 
            // fall through
          case 261: break;
          case 111: 
            { return NUM_FLOAT;
            } 
            // fall through
          case 262: break;
          case 112: 
            { return RETURN;
            } 
            // fall through
          case 263: break;
          case 113: 
            { return EXPORT;
            } 
            // fall through
          case 264: break;
          case 114: 
            { return ENTITY;
            } 
            // fall through
          case 265: break;
          case 115: 
            { return ASSERT;
            } 
            // fall through
          case 266: break;
          case 116: 
            { return STATIC;
            } 
            // fall through
          case 267: break;
          case 117: 
            { return SWITCH;
            } 
            // fall through
          case 268: break;
          case 118: 
            { return IMPORT;
            } 
            // fall through
          case 269: break;
          case 119: 
            { return AP_CONFIG;
            } 
            // fall through
          case 270: break;
          case 120: 
            { return NATIVE;
            } 
            // fall through
          case 271: break;
          case 121: 
            { return NUM_STRING;
            } 
            // fall through
          case 272: break;
          case 122: 
            { return NUM_DOUBLE;
            } 
            // fall through
          case 273: break;
          case 123: 
            { return DEFAULT;
            } 
            // fall through
          case 274: break;
          case 124: 
            { return RETHROW;
            } 
            // fall through
          case 275: break;
          case 125: 
            { return EXTENDS;
            } 
            // fall through
          case 276: break;
          case 126: 
            { return DIRECTIVE_SERVICE;
            } 
            // fall through
          case 277: break;
          case 127: 
            { return TYPEDEF;
            } 
            // fall through
          case 278: break;
          case 128: 
            { return LIBRARY;
            } 
            // fall through
          case 279: break;
          case 129: 
            { return FACTORY;
            } 
            // fall through
          case 280: break;
          case 130: 
            { return FINALLY;
            } 
            // fall through
          case 281: break;
          case 131: 
            { return NUM_INT;
            } 
            // fall through
          case 282: break;
          case 132: 
            { return NUM_BOOELAN;
            } 
            // fall through
          case 283: break;
          case 133: 
            { return NUM_ANY_BLOB;
            } 
            // fall through
          case 284: break;
          case 134: 
            { return DEFERRED;
            } 
            // fall through
          case 285: break;
          case 135: 
            { return REQUIRED;
            } 
            // fall through
          case 286: break;
          case 136: 
            { return EXTERNAL;
            } 
            // fall through
          case 287: break;
          case 137: 
            { return AP_ENTITIES;
            } 
            // fall through
          case 288: break;
          case 138: 
            { return ABSTRACT;
            } 
            // fall through
          case 289: break;
          case 139: 
            { return DIRECTIVE_PAGINATE;
            } 
            // fall through
          case 290: break;
          case 140: 
            { return CONTINUE;
            } 
            // fall through
          case 291: break;
          case 141: 
            { return OPERATOR;
            } 
            // fall through
          case 292: break;
          case 142: 
            { return NUM_TEXT_BLOB;
            } 
            // fall through
          case 293: break;
          case 143: 
            { return EXTENSION;
            } 
            // fall through
          case 294: break;
          case 144: 
            { return COVARIANT;
            } 
            // fall through
          case 295: break;
          case 145: 
            { return NUM_IMAGE_BLOB;
            } 
            // fall through
          case 296: break;
          case 146: 
            { return NUM_LOCAL_DATE;
            } 
            // fall through
          case 297: break;
          case 147: 
            { return IMPLEMENTS;
            } 
            // fall through
          case 298: break;
          case 148: 
            { return NUM_BIG_DECIMAL;
            } 
            // fall through
          case 299: break;
          case 149: 
            { return APPLICATION;
            } 
            // fall through
          case 300: break;
          case 150: 
            { return DIRECTIVE_MICROSERVICE;
            } 
            // fall through
          case 301: break;
          case 151: 
            { return NUM_ZONED_DATE_TIME;
            } 
            // fall through
          case 302: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
